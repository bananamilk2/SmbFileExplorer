package com.asjm.fileexplorer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asjm.fileexplorer.entity.FileSmb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tableFiles".
*/
public class FileSmbDao extends AbstractDao<FileSmb, Long> {

    public static final String TABLENAME = "tableFiles";

    /**
     * Properties of entity FileSmb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property FileHash = new Property(2, String.class, "fileHash", false, "FILE_HASH");
        public final static Property FileSource = new Property(3, String.class, "fileSource", false, "FILE_SOURCE");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(5, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileTime = new Property(6, java.util.Date.class, "fileTime", false, "FILE_TIME");
        public final static Property DownloadTime = new Property(7, java.util.Date.class, "downloadTime", false, "DOWNLOAD_TIME");
        public final static Property Dir = new Property(8, boolean.class, "dir", false, "DIR");
        public final static Property FileType = new Property(9, int.class, "fileType", false, "FILE_TYPE");
    }


    public FileSmbDao(DaoConfig config) {
        super(config);
    }
    
    public FileSmbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tableFiles\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"FILE_HASH\" TEXT," + // 2: fileHash
                "\"FILE_SOURCE\" TEXT," + // 3: fileSource
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"FILE_SIZE\" INTEGER," + // 5: fileSize
                "\"FILE_TIME\" INTEGER," + // 6: fileTime
                "\"DOWNLOAD_TIME\" INTEGER," + // 7: downloadTime
                "\"DIR\" INTEGER NOT NULL ," + // 8: dir
                "\"FILE_TYPE\" INTEGER NOT NULL );"); // 9: fileType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tableFiles_FILE_HASH ON \"tableFiles\"" +
                " (\"FILE_HASH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tableFiles\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileSmb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String fileHash = entity.getFileHash();
        if (fileHash != null) {
            stmt.bindString(3, fileHash);
        }
 
        String fileSource = entity.getFileSource();
        if (fileSource != null) {
            stmt.bindString(4, fileSource);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(6, fileSize);
        }
 
        java.util.Date fileTime = entity.getFileTime();
        if (fileTime != null) {
            stmt.bindLong(7, fileTime.getTime());
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(8, downloadTime.getTime());
        }
        stmt.bindLong(9, entity.getDir() ? 1L: 0L);
        stmt.bindLong(10, entity.getFileType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileSmb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String fileHash = entity.getFileHash();
        if (fileHash != null) {
            stmt.bindString(3, fileHash);
        }
 
        String fileSource = entity.getFileSource();
        if (fileSource != null) {
            stmt.bindString(4, fileSource);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(6, fileSize);
        }
 
        java.util.Date fileTime = entity.getFileTime();
        if (fileTime != null) {
            stmt.bindLong(7, fileTime.getTime());
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(8, downloadTime.getTime());
        }
        stmt.bindLong(9, entity.getDir() ? 1L: 0L);
        stmt.bindLong(10, entity.getFileType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileSmb readEntity(Cursor cursor, int offset) {
        FileSmb entity = new FileSmb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileHash
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileSource
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // fileSize
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // fileTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // downloadTime
            cursor.getShort(offset + 8) != 0, // dir
            cursor.getInt(offset + 9) // fileType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileSmb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setFileHash(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFileTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDownloadTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDir(cursor.getShort(offset + 8) != 0);
        entity.setFileType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileSmb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileSmb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileSmb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
