package com.asjm.fileexplorer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asjm.fileexplorer.entity.FileSmb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tableFiles".
*/
public class FileSmbDao extends AbstractDao<FileSmb, Long> {

    public static final String TABLENAME = "tableFiles";

    /**
     * Properties of entity FileSmb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property Hash = new Property(2, String.class, "hash", false, "HASH");
        public final static Property FileSource = new Property(3, String.class, "fileSource", false, "FILE_SOURCE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Size = new Property(5, Long.class, "size", false, "SIZE");
        public final static Property Date = new Property(6, Long.class, "date", false, "DATE");
        public final static Property DownloadTime = new Property(7, java.util.Date.class, "downloadTime", false, "DOWNLOAD_TIME");
        public final static Property Dir = new Property(8, boolean.class, "dir", false, "DIR");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property Path = new Property(10, String.class, "path", false, "PATH");
    }


    public FileSmbDao(DaoConfig config) {
        super(config);
    }
    
    public FileSmbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tableFiles\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"HASH\" TEXT," + // 2: hash
                "\"FILE_SOURCE\" TEXT," + // 3: fileSource
                "\"NAME\" TEXT," + // 4: name
                "\"SIZE\" INTEGER," + // 5: size
                "\"DATE\" INTEGER," + // 6: date
                "\"DOWNLOAD_TIME\" INTEGER," + // 7: downloadTime
                "\"DIR\" INTEGER NOT NULL ," + // 8: dir
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"PATH\" TEXT);"); // 10: path
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tableFiles_HASH ON \"tableFiles\"" +
                " (\"HASH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tableFiles\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileSmb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(3, hash);
        }
 
        String fileSource = entity.getFileSource();
        if (fileSource != null) {
            stmt.bindString(4, fileSource);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(6, size);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(8, downloadTime.getTime());
        }
        stmt.bindLong(9, entity.getDir() ? 1L: 0L);
        stmt.bindLong(10, entity.getType());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(11, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileSmb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(3, hash);
        }
 
        String fileSource = entity.getFileSource();
        if (fileSource != null) {
            stmt.bindString(4, fileSource);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(6, size);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }
 
        java.util.Date downloadTime = entity.getDownloadTime();
        if (downloadTime != null) {
            stmt.bindLong(8, downloadTime.getTime());
        }
        stmt.bindLong(9, entity.getDir() ? 1L: 0L);
        stmt.bindLong(10, entity.getType());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(11, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileSmb readEntity(Cursor cursor, int offset) {
        FileSmb entity = new FileSmb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hash
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileSource
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // date
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // downloadTime
            cursor.getShort(offset + 8) != 0, // dir
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileSmb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setHash(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDownloadTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDir(cursor.getShort(offset + 8) != 0);
        entity.setType(cursor.getInt(offset + 9));
        entity.setPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileSmb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileSmb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileSmb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
